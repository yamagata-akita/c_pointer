変数を格納しているメモリ上の領域のことを、Cではオブジェクト(object)と呼ぶ。
オブジェクトとして格納されるデータ型(int, doubleなど)のことをオブジェクト型(object type)と呼ぶ。

ポインタとは
最初にポインタ型がある。
ポインタ型はint型やdouble型と同じように、ポインタ型の変数、ポインタ型の値を持つ。
「ポインタ型」「ポインタ型の変数」「ポインタ型の値」の3つを単にポインタと呼ぶことが多いため、これら3つの混同に注意。

アドレス演算子&
変数のアドレスを取得する


変数は宣言順にメモリに格納されるとは限らない。

ポインタ型の値=アドレス(?)

ポインタ変数hoge_pが別の変数hogeのアドレスを保持している時、「hoge_pはhogeを指している」という。
hogeのアドレスの値を「hogeへのポインタ」と呼ぶ。(ここでのポインタは「ポインタ型の値」)

間接演算子*
ポインタに*をつけると、その指している先のものを表すようになる。
*hoge_p →  hoge_pからポインタを1つ「たぐり寄せて」、その値を表示する。

*hoge_pはhogeと同じものを表しているため、表示するだけでなく、代入することもできる。


まとめ
・変数に&演算子を適用すると、その変数のアドレスが取得できる。このアドレスのことを、その変数へのポインタと呼ぶ。

・ポインタ変数hoge_pが、別の変数hogeへのポインタを保持している時、「hoge_pがhogeを指している」という。

・ポインタに*演算子を適用すると、そのポインタの指している先のものを表すようになる。hoge_pがhogeを指しているなら、
　*hoge_pは、hogeと同じものを表す。


演算子(operator)
* 間接演算子
& アドレス演算子
[]添字演算子

演算の対象のことをオペランド(operand)というs
a + b のようにオペランドが2つの演算子のことを2項演算子と呼ぶ。
& , * のようにオペランドが1つの演算子のことを単項演算子と呼ぶ。


ポインタ演算
ポインタにn加算すると、ポインタは「そのポインタが指す型のサイズ×n」だけ進む。


C言語の関数について
C言語の関数は「値渡し」しかない。
ポインタを値渡しすることで、ポインタの指す先に値を詰めてもらう。
c++では参照渡しがある。


配列
int array[5];

式の中では、配列は「その戦闘要素へのポインタ」に読み替えられる。
後ろに[]がつくかどうかは関係ない。

p[i]は、*(p + i)のシンタックスシュガーである。
添字演算子[]には、もともとそういう意味しかなく、配列とは無関係。

配列を関数の引数として渡したい場合、先頭要素へのポインタを渡すこと。

















